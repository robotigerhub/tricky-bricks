local c = require("modules.common")

local BLOCK_TYPES = {"s", "z", "j", "l", "o", "i", "t"}

local spawn_block, move_up, choose_next_block_type

function init(self)
	self.spawn = true
	self.spawned_block = nil
	self.put_block = nil
	self.next_block_type = nil
	draw_next_block_type(self)
end

function draw_next_block_type(self)
	self.next_block_type = BLOCK_TYPES[math.random(#BLOCK_TYPES)]
	msg.post("/guis#main", "update_block", {block = self.next_block_type})
end

function on_message(self, message_id, message, sender)
	if message_id == hash("spawn_block") then
		if self.spawn then
			spawn_block(self)
			msg.post("/main#script", "block_spawned")
		end
	elseif message_id == hash("move") then
		move()
	elseif message_id == hash("stop_spawning") then
		self.spawn = false
	elseif message_id == hash("delete_spawned_block") then
		if self.spawned_block and go.exists(self.spawned_block) then
			go.delete(self.spawned_block)
		end
	elseif message_id == hash("delete_put_block") then
		if self.put_block and go.exists(self.put_block) then
			go.delete(self.put_block)
		end
	elseif message_id == hash("pass_spawned_to_put") then
		self.put_block = self.spawned_block
	end
end

function spawn_block(self)
	local f = "#factoryl"-- .. self.next_block_type
	self.spawned_block = factory.create(f, go.get_position("."))
	draw_next_block_type(self)
end

function move()
	local pos_y_raycaster = go.get_position("/raycaster").y + c.SPAWN_RAYCASTER_DIST * c.TILE_SIZE
	local pos_y_deadline = go.get_position("/deadline").y + c.SPAWN_DEADLINE_DIST * c.TILE_SIZE
	go.set(".", "position.y", math.max(pos_y_deadline, pos_y_raycaster))
end