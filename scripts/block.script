go.property("current", false)

local SPEED_LOW = 50
local SPEED_HIGH = 120
local speed = SPEED_LOW
local Q_90_ABOUT_Z = vmath.quat_axis_angle(vmath.vector3(0, 0, 1), math.pi/2)

function init(self)
	msg.post(".", "acquire_input_focus")
	msg.post("#dynamicco", "disable")
	self.current = true
	self.can_move = true
end

function update(self, dt)
	if self.current then
		move(vmath.vector3(0, -speed*dt, 0))
	end
end

function move(vector)
	go.set_position(go.get_position() + vector)
end

function on_input(self, action_id, action)
	if action_id == hash("left") and self.can_move then
		move_and_wait(self, vmath.vector3(-9, 0, 0))
	elseif action_id == hash("right") and self.can_move then
		move_and_wait(self, vmath.vector3(9, 0, 0))
	elseif action_id == hash("rotate") and action.pressed then
		go.animate(".", "rotation", go.PLAYBACK_ONCE_FORWARD, go.get_rotation()*Q_90_ABOUT_Z, go.EASING_LINEAR, 0.08)
	elseif action_id == hash("fast") and action.pressed then
		speed = SPEED_HIGH
	elseif action_id == hash("fast") and action.released then
		speed = SPEED_LOW
	end
end

function move_and_wait(self, vector)
	move(vector)
	self.can_move = false
	timer.delay(0.1, false, allow_move)
end

function allow_move(self)
	self.can_move = true
end

function on_message(self, message_id, message, sender)
	if self.current
	and message_id == hash("contact_point_response")
	and message.distance > 0.5 then
		self.current = false
		msg.post(".", "release_input_focus")
		msg.post("#kinematicco", "disable")
		msg.post("#dynamicco", "enable")
		msg.post("/main#script", "block_put")
	end
end