go.property("state", 0)

local c = require("modules.common")

local SPEED_LOW = 50
local SPEED_HIGH = 120
local Q_90_ABOUT_Z = vmath.quat_axis_angle(vmath.vector3(0, 0, 1), math.pi/2)

local speed = SPEED_LOW

local function move(vector)
	go.set_position(go.get_position() + vector)
end

local function move_and_block(self, vector)
	move(vector)
	self.state = c.STATES.current.skidding
	timer.delay(0.08, false,
	function(self, handle, time_elapsed)
		if c.is_state(self.state, c.STATES.current.skidding) then
			self.state = c.STATES.current.still
		end
	end)
end

local function is_fast()
	return vmath.length_sqr(go.get("#dynamicco", "linear_velocity")) > 20^2
end

local function check_fall(self, handle, time_elapsed)
	if is_fast() then
		self.state = c.STATES.falling
		msg.post("/main#script", "block_lost")
		timer.cancel(handle)
	end
end

function init(self)
	msg.post(".", "acquire_input_focus")
	msg.post("#dynamicco", "disable")
	self.state = c.STATES.current.still
end

function update(self, dt)
	if c.is_state(self.state, c.STATES.current) then
		move(vmath.vector3(0, -speed*dt, 0))
		speed = SPEED_LOW
	end
end

function on_input(self, action_id, action)
	if action_id == hash("left") and c.is_state(self.state, c.STATES.current.still) then
		move_and_block(self, vmath.vector3(-0.5*c.TILE_SIZE, 0, 0))
	elseif action_id == hash("right") and c.is_state(self.state, c.STATES.current.still) then
		move_and_block(self, vmath.vector3(0.5*c.TILE_SIZE, 0, 0))
	elseif action_id == hash("quick-left")
	and c.is_state(self.state, c.STATES.current.still)
	and action.pressed then
		move_and_block(self, vmath.vector3(-c.TILE_SIZE, 0, 0))
	elseif action_id == hash("quick-right")
	and c.is_state(self.state, c.STATES.current.still)
	and action.pressed then
		move_and_block(self, vmath.vector3(c.TILE_SIZE, 0, 0))
	elseif action_id == hash("rotate") and action.pressed then
		go.animate(
			".", "rotation", go.PLAYBACK_ONCE_FORWARD,
			go.get_rotation()*Q_90_ABOUT_Z, go.EASING_LINEAR, 0.08
		)
	elseif action_id == hash("fast") then
		speed = SPEED_HIGH
	end
end

function on_message(self, message_id, message, sender)
	if c.is_state(self.state, c.STATES.current)
	and message_id == hash("contact_point_response")
	and message.distance > 1 then
		self.state = c.STATES.put
		msg.post(".", "release_input_focus")
		msg.post("#kinematicco", "disable")
		msg.post("#dynamicco", "enable")
		msg.post("/main#script", "block_put")
		timer.delay(1, true, check_fall)
	elseif c.is_state(self.state, c.STATES.falling)
	and message_id == hash("contact_point_response")
	and not is_fast() then
		self.state = c.STATES.put
		msg.post("/main#script", "block_saved")
		timer.delay(1, true, check_fall)
	end
end