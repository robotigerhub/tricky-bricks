local c = require("modules.common")

local consume_down_by, animate_or_queue, move_down, move_up, animation_complete
local countdown, continue_countdown

function init(self)
	self.cd = coroutine.create(countdown)
	self.down_by = 0
	self.animation_queue = {}
	self.animating = false
	timer.delay(1, true, consume_down_by)
end

function consume_down_by(self, handle, time_elapsed)
	if self.down_by > 0 then
		animate_or_queue(self, move_down)
	end
end

function animate_or_queue(self, animation)
	if not self.animating then
		self.animating = true
		animation(self)
	else
		table.insert(self.animation_queue, animation)
	end
end

function move_down(self)
	local new_position_y = go.get_position().y - self.down_by*c.TILE_SIZE
	self.down_by = 0
	go.animate(".", "position.y", go.PLAYBACK_ONCE_FORWARD,
		new_position_y, go.EASING_INOUTQUAD, 0.5, 0, animation_complete
	)
end

function move_up(self)
	local new_position_y = go.get_position().y + c.DEADLINE_RAISE*c.TILE_SIZE
	go.animate(".", "position.y", go.PLAYBACK_ONCE_FORWARD,
		new_position_y, go.EASING_INOUTQUAD, 0.5, 0,
		function(self)
			msg.post("/main#script", "deadline_moved")
			animation_complete(self)
		end
	)
end

function animation_complete(self)
	print("animation_complete")
	if #self.animation_queue > 0 then
		table.remove(self.animation_queue, 1)(self)
	else
		self.animating = false
	end
end

function countdown(self)
	coroutine.yield(3)
	coroutine.yield(2)
	return 1
end

function on_message(self, message_id, message, sender)
	if message_id == hash("trigger_response") then
		go.delete(message.other_id)
		msg.post("/main", "block_lost")
		msg.post("/blockspawner#script", "stop_spawning")
		msg.post("/blockspawner#script", "delete_last_block")
		_, time = coroutine.resume(self.cd, self)
		print(time)
		timer.delay(1, true, continue_countdown)
	elseif message_id == hash("move_up") then
		animate_or_queue(self, move_up)
	elseif message_id == hash("block_removed") then
		self.down_by = self.down_by + 1
	end
end

function continue_countdown(self, handle, time_elapsed)
	local status, time = coroutine.resume(self.cd, self)
	if status then
		print(time)
	else
		msg.post("/main#script", "show_game_over")
		timer.cancel(handle)
	end
end