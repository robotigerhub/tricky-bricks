local c = require("modules.common")

local function animate_or_queue(self, animation)
	if not self.animating then
		self.animating = true
		animation(self)
	else
		table.insert(self.animation_queue, animation)
	end
end

local function animation_complete(self)
	msg.post("/blockspawner", "move")
	if #self.animation_queue > 0 then
		table.remove(self.animation_queue, 1)(self)
	else
		self.animating = false
	end
end

local function move_down(self)
	local new_position_y = go.get_position().y - c.TILE_SIZE
	go.animate(".", "position.y", go.PLAYBACK_ONCE_FORWARD,
		new_position_y, go.EASING_LINEAR, 0.3, 0, animation_complete
	)
end

local function move_up(self)
	local new_position_y = go.get_position().y + c.DEADLINE_RAISE*c.TILE_SIZE
	go.animate(".", "position.y", go.PLAYBACK_ONCE_FORWARD,
		new_position_y, go.EASING_INOUTQUAD, 0.5, 0,
		function(self)
			msg.post("/main#script", "deadline_moved")
			animation_complete(self)
		end
	)
end

local function countdown(self)
	for i = 3, 1, -1 do
		msg.post("/guis#gui", "update_countdown", { text = tostring(i) })
		coroutine.yield()
	end
	msg.post("/guis#gui", "update_countdown", { text = "FINISH" })
	msg.post("/main#script", "game_over")
	return
end

function init(self)
	self.cd = coroutine.create(countdown)
	self.animation_queue = {}
	self.animating = false
end

function on_message(self, message_id, message, sender)
	if message_id == hash("trigger_response") then
		go.delete(message.other_id)
		msg.post("/main#script", "block_lost")
		msg.post("/blockspawner#script", "stop_spawning")
		msg.post("/blockspawner#script", "delete_spawned_block")
		msg.post("/camera#script", "zoom_out")
		msg.post("/main#script", "disable_power")
		coroutine.resume(self.cd, self)
		timer.delay(1, true, function(self, handle, time_elapsed)
			local status = coroutine.resume(self.cd, self)
			if not status then
				timer.cancel(handle)
			end
		end)
	elseif message_id == hash("move_up") then
		animate_or_queue(self, move_up)
	elseif message_id == hash("block_removed") then
		animate_or_queue(self, move_down)
	end
end