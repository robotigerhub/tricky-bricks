local LEVEL_STEP = 2

local count = 6
local last_level = count
local score = 0

local after_block_put, post_spawn_message, switch_level, set_count, change_score

function init(self)
	math.randomseed(os.time())
	math.random();math.random();math.random();  -- discard first few random numbers
	msg.post("/guis#main", "update_score", {score = score})
	msg.post("/guis#main", "update_count", {count = count})
	msg.post("/basespawner#script", "spawn_base")
	msg.post("/blockspawner#script", "spawn_block")
end

function on_message(self, message_id, message, sender)
	if message_id == hash("block_spawned") then
		set_count(count - 1)
	elseif message_id == hash("block_put") then
		change_score(1)
		after_block_put()
	elseif message_id == hash("block_lost") then
		change_score(-1)
	elseif message_id == hash("block_saved") then
		change_score(1)
	elseif message_id == hash("show_game_over") then
		print("YOUR SCORE:", score)
	elseif message_id == hash("current_block_removed") then
		after_block_put()
	elseif message_id == hash("deadline_moved") then
		msg.post("/supportspawner#script", "spawn_supports")
		msg.post("/blockspawner#script", "spawn_block")
	end
end

function change_score(value)
	score = score + value
	msg.post("/guis#main", "update_score", {score = score})
end

function after_block_put()
	if count == 0 then
		switch_level()
	else
		msg.post("/blockspawner#script", "spawn_block")
	end
end

function set_count(value)
	count = value
	msg.post("/guis#main", "update_count", {count = count})
end

function switch_level()
	set_count(last_level + LEVEL_STEP)
	msg.post("/deadline#script", "move_up")
end