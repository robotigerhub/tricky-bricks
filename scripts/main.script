local LEVEL_STEP = 2
local BASE_COUNT = 6

local count = BASE_COUNT
local last_level = count
local score = 0
local save_file = sys.get_save_file("tricky-bricks", "highscore")
local highscore = sys.load(save_file)["highscore"] or 0
local power = false

local function change_score(value)
	score = score + value
	msg.post("/guis#gui", "update_score", {score = score})
end

local function set_count(value)
	count = value
	msg.post("/guis#gui", "update_count", {count = count})
end

local function switch_level()
	set_count(last_level + LEVEL_STEP)
	last_level = count
	msg.post("/deadline#script", "move_up")
end

local function spawn_or_switch()
	if count == 0 then
		switch_level()
	else
		msg.post("/blockspawner#script", "spawn_block")
	end
end

local function enable_power()
	power = true
	msg.post("/guis#gui", "enable_power")
end

local function disable_power()
	power = false
	msg.post("/guis#gui", "disable_power")
end

function init(self)
	math.randomseed(os.time())
	math.random();math.random();math.random();  -- discard first few random numbers
	msg.post(".", "acquire_input_focus")
	msg.post("/guis#gui", "update_score", {score = score})
	msg.post("/guis#gui", "update_highscore", {highscore = highscore})
	msg.post("/guis#gui", "update_count", {count = count})
	msg.post("/basespawner#script", "spawn_base")
	msg.post("/blockspawner#script", "spawn_block")
end

function on_message(self, message_id, message, sender)
	if message_id == hash("block_spawned") then
		set_count(count - 1)
	elseif message_id == hash("block_put") then
		change_score(1)
		msg.post("/blockspawner#script", "pass_spawned_to_put")
		spawn_or_switch()
	elseif message_id == hash("block_lost") then
		change_score(-1)
	elseif message_id == hash("block_saved") then
		change_score(1)
	elseif message_id == hash("game_over") then
		if score > highscore then
			highscore = score
			sys.save(save_file, {highscore = highscore})
			msg.post("/guis#gui", "update_highscore", {highscore = highscore})
		end
		msg.post("main:/loader#script", "end_game")
	elseif message_id == hash("current_block_removed") then
		spawn_or_switch()
	elseif message_id == hash("deadline_moved") then
		enable_power()
		msg.post("/supportspawner#script", "spawn_supports")
	elseif message_id == hash("supports_spawned") then
		msg.post("/blockspawner#script", "spawn_block")
	elseif message_id == hash("disable_power") then
		disable_power()
	end
end

function on_input(self, action_id, action)
	if action_id == hash("remove") and power then
		disable_power()
		msg.post("/blockspawner", "delete_put_block")
		change_score(-1)
	end
end